# kakrc

# editor settings
# ==============================================================================

# default tab size of 4 spaces
set-option global tabstop 4

# disable all default indent and insert hooks
set-option global disabled_hooks '.*-indent.*|.*-insert.*'

# preserve indent level
hook global InsertChar \n %{
    try %{ execute-keys -draft <semicolon> K <a-&> }
}

# trim trailing whitespace on the current line when leaving insert mode
hook global ModeChange pop:insert:.* %{
    try %{ execute-keys -draft '<a-x>s\h+$<ret>d' }
}

# run the formatcmd for the current filetype on write
hook global BufWritePre .* %{
    try %{ format-buffer }
}

# load editorconfig for all buffers except special ones like *debug*
hook global WinCreate ^[^*]+$ %{editorconfig-load}

hook global WinSetOption filetype=(cpp|kak|python|rust|xml|yml) expandtab

# use ripgrep for grepping
set-option global grepcmd 'rg --column'

# use foot as the terminal
set-option global windowing_modules 'wayland'

# ui settings
# ==============================================================================

colorscheme solarized-dark

add-highlighter global/ number-lines -hlcursor -separator ' '
add-highlighter global/ show-matching

set-option global scrolloff 3,3
set-option global ui_options ncurses_assistant=none

set-option global startup_info_version 20210828

set-option global gdb_location_symbol â–¶

# extra functionality
# ==============================================================================

# fuzzy open file
define-command fuzzy-open-file %{
    try %sh{
        foot -d error --app-id=float sh -c "kak_open_file.sh $kak_session $kak_client"
    }
}

define-command find -menu -params 1 -shell-script-candidates %{ rg --files } %{ edit %arg{1} }

# Enable kak-lsp for some filetypes
evaluate-commands %sh{kak-lsp --kakoune -s $kak_session}
hook global WinSetOption filetype=(c|cpp) %{
    lsp-enable-window
}

# uncomment to enable debug logging for kak-lsp
#set-option global lsp_cmd "kak-lsp -s %val{session} -vvv --log /tmp/kak-lsp.log"

# key bindings
# ==============================================================================

# space is the best leader
map global normal <space> , -docstring 'leader'

# use backspace to do what space used to do
map global normal <backspace> <space> -docstring 'remove all sels except main'
map global normal <a-backspace> <a-space> -docstring 'remove main sel'

# this particular readline style binding is quite nice
map global insert <c-w> <esc>bdi

# general utility
map global user w ': w<ret>' -docstring 'write'
map global user g ':grep ' -docstring 'grep'
map global user p ': fuzzy-open-file<ret>' -docstring 'open file'
map global user d ': db<ret>' -docstring 'close buffer'
map global user b ': make<ret>' -docstring 'make'

map global user j 'iCo-authored-by: Joran Dirk Greef <lt>joran@coil.com<gt><esc>'

# system clipboard
map global user c '<a-|>wl-copy<ret>' -docstring 'wl-copy'
map global user v '!wl-paste -n<ret>' -docstring 'wl-paste'

# wrap to 80 characters
map global user f '|fmt -w 80<ret>' -docstring 'wrap to 80'

# wrap to 80 with comments and shit
map global user F '<a-x>Z<a-;>;Wyzs^<c-r>"<ret>dz|fmt -w 77<ret><a-s>ghP<space>'

# lsp mode
map global user l ': enter-user-mode lsp<ret>' -docstring 'lsp mode'

# spell checking
declare-user-mode spell
map global spell s ': spell<ret>' -docstring 'spell'
map global spell c ': spell-clear<ret>' -docstring 'clear'
map global spell n ': spell-next<ret>' -docstring 'next'
map global spell r ': spell-replace<ret>' -docstring 'replace'
map global user s ': enter-user-mode spell<ret>' -docstring 'spell mode'

# gdb
declare-user-mode gdb
map global gdb n ': gdb-next<ret>' -docstring 'next'
map global gdb s ': gdb-step<ret>' -docstring 'step'
map global gdb c ': gdb-continue<ret>' -docstring 'continue'
map global gdb f ': gdb-finish<ret>' -docstring 'finish function'
map global gdb b ': gdb-toggle-breakpoint<ret>' -docstring 'break'
map global gdb g ': gdb-jump-to-location<ret>' -docstring 'goto current location'
map global gdb p ': gdb-print<ret>' -docstring 'print selection'
map global gdb t ': gdb-backtrace<ret>' -docstring 'print backtrace'
define-command gdb -params 0 'enter-user-mode -lock gdb' -docstring 'gdb mode'

define-command gdb-connect-clipboard %{
    evaluate-commands gdb-session-connect
    %sh{
        wl-copy -o "new-ui mi3 ${kak_opt_gdb_dir}/pty"
    }
}
