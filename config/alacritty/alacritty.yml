# Configuration for Alacritty, the GPU enhanced terminal emulator.

scrolling:
  # Maximum number of lines in the scrollback buffer.
  # Specifying '0' will disable scrolling.
  history: 10000

  # Number of lines the viewport will move for every line scrolled when
  # scrollback is enabled (history > 0).
  multiplier: 3

window:
  padding:
    x: 3
    y: 3

# Font configuration (changes require restart)
font:
  normal:
    family: cozette
  bold:
    family: cozette
  itallic:
    family: cozette
  size: 9.0

  # Offset is the extra space around each character. `offset.y` can be thought of
  # as modifying the line spacing, and `offset.x` as modifying the letter spacing.
  offset:
    x: 0
    y: 0

  # Glyph offset determines the locations of the glyphs within their cells with
  # the default being at the bottom. Increasing `x` moves the glyph to the right,
  # increasing `y` moves the glyph upwards.
  glyph_offset:
    x: 0
    y: 0

# If `true`, bold text is drawn using the bright color variants.
draw_bold_text_with_bright_colors: false

colors:
  primary:
    background: '0x002b36'
    foreground: '0x839496'

  # Colors the cursor will use if `custom_cursor_colors` is true
  cursor:
    text:       '0x002b36'
    cursor:     '0x839496'

  selection:
    text:       '0x002b36'
    background: '0x839496'

  normal:
    black:      '0x073642'
    red:        '0xdc322f'
    green:      '0x859900'
    yellow:     '0xb58900'
    blue:       '0x268bd2'
    magenta:    '0xd33682'
    cyan:       '0x2aa198'
    white:      '0xeee8d5'

  bright:
    black:      '0x002b36'
    red:        '0xcb4b16'
    green:      '0x586e75'
    yellow:     '0x657b83'
    blue:       '0x839496'
    magenta:    '0x6c71c4'
    cyan:       '0x93a1a1'
    white:      '0xfdf6e3'

# Visual Bell
#
# Any time the BEL code is received, Alacritty "rings" the visual bell. Once
# rung, the terminal background will be set to white and transition back to the
# default background color. You can control the rate of this transition by
# setting the `duration` property (represented in milliseconds). You can also
# configure the transition function by setting the `animation` property.
#
# Values for `animation`:
#   - Ease
#   - EaseOut
#   - EaseOutSine
#   - EaseOutQuad
#   - EaseOutCubic
#   - EaseOutQuart
#   - EaseOutQuint
#   - EaseOutExpo
#   - EaseOutCirc
#   - Linear
#
# Specifying a `duration` of `0` will disable the visual bell.
visual_bell:
  animation: EaseOutExpo
  duration: 0
  color: '0x93a1a1'

mouse:
  hide_when_typing: true
  url:
    launcher:
      program: firefox-developer-edition

selection:
  semantic_escape_chars: ",│`|:\"' ()[]{}<>"

  # When set to `true`, selected text will be copied to the primary clipboard.
  save_to_clipboard: false

# Allow terminal applications to change Alacritty's window title.
dynamic_title: true

cursor:
  # Cursor style
  #
  # Values for `style`:
  #   - ▇ Block
  #   - _ Underline
  #   - | Beam
  style: Block
  vi_mode_style: Block

  # If this is `true`, the cursor will be rendered as a hollow box when the
  # window is not focused.
  unfocused_hollow: true

# Live config reload (changes require restart)
live_config_reload: true

# Startup directory
#
# Directory the shell is started in. If this is unset, or `None`, the working
# directory of the parent process will be used.
working_directory: None

# Send ESC (\x1b) before characters when alt is pressed.
alt_send_esc: true

# Key bindings
#
# Key bindings are specified as a list of objects. For example, this is the
# default paste binding:
#
# `- { key: V, mods: Control|Shift, action: Paste }`
#
# Each key binding will specify a:
#
# - `key`: Identifier of the key pressed
#
#    - A-Z
#    - F1-F24
#    - Key0-Key9
#
#    A full list with available key codes can be found here:
#    https://docs.rs/glutin/*/glutin/event/enum.VirtualKeyCode.html#variants
#
#    Instead of using the name of the keys, the `key` field also supports using
#    the scancode of the desired key. Scancodes have to be specified as a
#    decimal number. This command will allow you to display the hex scancodes
#    for certain keys:
#
#       `showkey --scancodes`.
#
# Then exactly one of:
#
# - `chars`: Send a byte sequence to the running application
#
#    The `chars` field writes the specified string to the terminal. This makes
#    it possible to pass escape sequences. To find escape codes for bindings
#    like `PageUp` (`"\x1b[5~"`), you can run the command `showkey -a` outside
#    of tmux. Note that applications use terminfo to map escape sequences back
#    to keys. It is therefore required to update the terminfo when changing an
#    escape sequence.
#
# - `action`: Execute a predefined action
#
#   - ToggleViMode
#   - Copy
#   - Paste
#   - PasteSelection
#   - IncreaseFontSize
#   - DecreaseFontSize
#   - ResetFontSize
#   - ScrollPageUp
#   - ScrollPageDown
#   - ScrollLineUp
#   - ScrollLineDown
#   - ScrollToTop
#   - ScrollToBottom
#   - ClearHistory
#   - Hide
#   - Minimize
#   - Quit
#   - ToggleFullscreen
#   - SpawnNewInstance
#   - ClearLogNotice
#   - ClearSelection
#   - ReceiveChar
#   - None
#
#   (`mode: Vi` only):
#   - Open
#   - Up
#   - Down
#   - Left
#   - Right
#   - First
#   - Last
#   - FirstOccupied
#   - High
#   - Middle
#   - Low
#   - SemanticLeft
#   - SemanticRight
#   - SemanticLeftEnd
#   - SemanticRightEnd
#   - WordRight
#   - WordLeft
#   - WordRightEnd
#   - WordLeftEnd
#   - Bracket
#   - ToggleNormalSelection
#   - ToggleLineSelection
#   - ToggleBlockSelection
#   - ToggleSemanticSelection
#
#   (macOS only):
#   - ToggleSimpleFullscreen: Enters fullscreen without occupying another space
#
#   (Linux/BSD only):
#   - CopySelection: Copies into selection buffer
#
# - `command`: Fork and execute a specified command plus arguments
#
#    The `command` field must be a map containing a `program` string and an
#    `args` array of command line parameter strings. For example:
#       `{ program: "alacritty", args: ["-e", "vttest"] }`
#
# And optionally:
#
# - `mods`: Key modifiers to filter binding actions
#
#    - Command
#    - Control
#    - Option
#    - Super
#    - Shift
#    - Alt
#
#    Multiple `mods` can be combined using `|` like this:
#       `mods: Control|Shift`.
#    Whitespace and capitalization are relevant and must match the example.
#
# - `mode`: Indicate a binding for only specific terminal reported modes
#
#    This is mainly used to send applications the correct escape sequences
#    when in different modes.
#
#    - AppCursor
#    - AppKeypad
#    - Alt
#
#    A `~` operator can be used before a mode to apply the binding whenever
#    the mode is *not* active, e.g. `~Alt`.
#
# Bindings are always filled by default, but will be replaced when a new
# binding with the same triggers is defined. To unset a default binding, it can
# be mapped to the `ReceiveChar` action. Alternatively, you can use `None` for
# a no-op if you do not wish to receive input characters for that binding.
#
# If the same trigger is assigned to multiple actions, all of them are executed
# at once.
key_bindings:
  - { key: Paste,                                action: Paste          }
  - { key: Copy,                                 action: Copy           }
  - { key: L,         mods: Control,             action: ClearLogNotice }
  # - { key: L,         mods: Control, mode: ~Vi,  chars: "\x0c"          }
  - { key: PageUp,    mods: Shift,   mode: ~Alt, action: ScrollPageUp,  }
  - { key: PageDown,  mods: Shift,   mode: ~Alt, action: ScrollPageDown }
  - { key: Home,      mods: Shift,   mode: ~Alt, action: ScrollToTop,   }
  - { key: End,       mods: Shift,   mode: ~Alt, action: ScrollToBottom }

  - { key: V,        mods: Control|Shift,           action: Paste            }
  - { key: C,        mods: Control|Shift,           action: Copy             }
  # - { key: C,        mods: Control|Shift, mode: Vi, action: ClearSelection   }
  - { key: Insert,   mods: Shift,                   action: PasteSelection   }
  - { key: Key0,     mods: Control,                 action: ResetFontSize    }
  - { key: Equals,   mods: Control,                 action: IncreaseFontSize }
  - { key: Add,      mods: Control,                 action: IncreaseFontSize }
  - { key: Subtract, mods: Control,                 action: DecreaseFontSize }
  - { key: Minus,    mods: Control,                 action: DecreaseFontSize }

  # Vi Mode
  # - { key: Space,  mods: Shift|Control, mode: Vi, action: ScrollToBottom          }
  # - { key: Space,  mods: Shift|Control,           action: ToggleViMode            }
  # - { key: Escape,                      mode: Vi, action: ClearSelection          }
  # - { key: I,                           mode: Vi, action: ScrollToBottom          }
  # - { key: I,                           mode: Vi, action: ToggleViMode            }
  # - { key: Y,      mods: Control,       mode: Vi, action: ScrollLineUp            }
  # - { key: E,      mods: Control,       mode: Vi, action: ScrollLineDown          }
  # - { key: G,                           mode: Vi, action: ScrollToTop             }
  # - { key: G,      mods: Shift,         mode: Vi, action: ScrollToBottom          }
  # - { key: B,      mods: Control,       mode: Vi, action: ScrollPageUp            }
  # - { key: F,      mods: Control,       mode: Vi, action: ScrollPageDown          }
  # - { key: U,      mods: Control,       mode: Vi, action: ScrollHalfPageUp        }
  # - { key: D,      mods: Control,       mode: Vi, action: ScrollHalfPageDown      }
  # - { key: Y,                           mode: Vi, action: Copy                    }
  # - { key: Y,                           mode: Vi, action: ClearSelection          }
  # - { key: Copy,                        mode: Vi, action: ClearSelection          }
  # - { key: V,                           mode: Vi, action: ToggleNormalSelection   }
  # - { key: V,      mods: Shift,         mode: Vi, action: ToggleLineSelection     }
  # - { key: V,      mods: Control,       mode: Vi, action: ToggleBlockSelection    }
  # - { key: V,      mods: Alt,           mode: Vi, action: ToggleSemanticSelection }
  # - { key: Return,                      mode: Vi, action: Open                    }
  # - { key: K,                           mode: Vi, action: Up                      }
  # - { key: J,                           mode: Vi, action: Down                    }
  # - { key: H,                           mode: Vi, action: Left                    }
  # - { key: L,                           mode: Vi, action: Right                   }
  # - { key: Up,                          mode: Vi, action: Up                      }
  # - { key: Down,                        mode: Vi, action: Down                    }
  # - { key: Left,                        mode: Vi, action: Left                    }
  # - { key: Right,                       mode: Vi, action: Right                   }
  # - { key: Key0,                        mode: Vi, action: First                   }
  # - { key: Key4,   mods: Shift,         mode: Vi, action: Last                    }
  # - { key: Key6,   mods: Shift,         mode: Vi, action: FirstOccupied           }
  # - { key: H,      mods: Shift,         mode: Vi, action: High                    }
  # - { key: M,      mods: Shift,         mode: Vi, action: Middle                  }
  # - { key: L,      mods: Shift,         mode: Vi, action: Low                     }
  # - { key: B,                           mode: Vi, action: SemanticLeft            }
  # - { key: W,                           mode: Vi, action: SemanticRight           }
  # - { key: E,                           mode: Vi, action: SemanticRightEnd        }
  # - { key: B,      mods: Shift,         mode: Vi, action: WordLeft                }
  # - { key: W,      mods: Shift,         mode: Vi, action: WordRight               }
  # - { key: E,      mods: Shift,         mode: Vi, action: WordRightEnd            }
  # - { key: Key5,   mods: Shift,         mode: Vi, action: Bracket                 }
